#include "WiFiProv.h"
#include "WiFi.h"

// Define proof of possession (PIN) and service details
const char* proofOfPossession = "abcd1234"; // PIN provided by the device, entered by user in the app
const char* deviceName = "PROV_123"; // Device name, typically starting with "Prov_"
const char* devicePassword = NULL; // Password for SofAP method (NULL means no password required)
bool clearProvisionedData = true; // Automatically clear previously provisioned data when true

// Event handler function for WiFi and provisioning events
void handleSystemProvisioningEvent(arduino_event_t *event) {
    switch (event->event_id) {
    case ARDUINO_EVENT_WIFI_STA_GOT_IP:
        Serial.print("\nIP Address acquired: ");
        Serial.println(IPAddress(event->event_info.got_ip.ip_info.ip.addr));
        break;
    case ARDUINO_EVENT_WIFI_STA_DISCONNECTED:
        Serial.println("\nDisconnected. Reconnecting to AP...");
        break;
    case ARDUINO_EVENT_PROV_START:
        Serial.println("\nProvisioning initiated. Enter your Wi-Fi credentials using the smartphone app.");
        break;
    case ARDUINO_EVENT_PROV_CRED_RECV: {
        Serial.println("\nWi-Fi credentials received:");
        Serial.print("\tSSID: ");
        Serial.println((const char*) event->event_info.prov_cred_recv.ssid);
        Serial.print("\tPassword: ");
        Serial.println((const char*) event->event_info.prov_cred_recv.password);
        break;
    }
    case ARDUINO_EVENT_PROV_CRED_FAIL: {
        Serial.println("\nProvisioning failed! Please reset to factory settings and try again.");
        if (event->event_info.prov_fail_reason == WIFI_PROV_STA_AUTH_ERROR)
            Serial.println("\nIncorrect Wi-Fi AP password.");
        else
            Serial.println("\nWi-Fi AP not found. Consider adding \"nvs_flash_erase()\" before beginProvision().");
        break;
    }
    case ARDUINO_EVENT_PROV_CRED_SUCCESS:
        Serial.println("\nProvisioning successful.");
        break;
    case ARDUINO_EVENT_PROV_END:
        Serial.println("\nProvisioning process ended.");
        break;
    default:
        break;
    }
}

void setup() {
    Serial.begin(115200);
    WiFi.onEvent(handleSystemProvisioningEvent);

    Serial.println("Starting BLE provisioning...");
    // UUID for BLE provisioning
    uint8_t serviceUUID[16] = {0xb4, 0xdf, 0x5a, 0x1c, 0x3f, 0x6b, 0xf4, 0xbf,
                                0xea, 0x4a, 0x82, 0x03, 0x04, 0x90, 0x1a, 0x02 };
    WiFiProv.beginProvision(WIFI_PROV_SCHEME_BLE, WIFI_PROV_SCHEME_HANDLER_FREE_BTDM, WIFI_PROV_SECURITY_1, proofOfPossession, deviceName, devicePassword, serviceUUID, clearProvisionedData);
    log_d("Generated BLE QR Code");
    WiFiProv.printQR(deviceName, proofOfPossession, "ble");
}

void loop() {
    // Main loop is intentionally left empty
}
